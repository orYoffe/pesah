
// ================== Functions

isLoggedIn() { auth != null && currentUser() != null }
currentUser() { auth.uid }
isSameId(uid) { auth != null && uid == currentUser() }
isEmptyAndLogged() { auth != null && !data }
isAdmin () {
  prior(root).child('users').child(currentUser()).child('isAdmin').val() == true;
}


getRoomInfo(id) { prior(root).rooms[id] }

isMember(uid) {
  root.child('rooms').child(uid) || root.child('rooms').child(uid).child('members').val()[currentUser()] != null && !root.child('rooms').child(uid).child('members').val()[currentUser()].isBanned
}
isEventOwner(uid) {
  isLoggedIn() && prior(root).child('events').child(uid).val() != null && prior(root).child('events').child(uid).child('managers').val()[currentUser()] == true;
}

initial(value, init) { value == (isInitial(value) ? init : prior(value)) }
isInitial(value) { prior(value) == null }
// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.

//type Post {
//  read() { isSameId(uid) || isAdmin() }
//  write() { isAdmin() }
//  index() { ["email"] }
//  message: String,
//  modified: CurrentTimestamp,
//  created: InitialTimestamp,
//}

type Location {
  country: String,
  city: String,
  short: String,
  address: String,
  lat: Number,
  lng: Number
}
type Collaboration {
  artists: Object,
  venues: Object,
  fans: Object
}
type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}



type CurrentTimestamp extends Number {
  validate() { this == now }
}

//path /users/{uid} is User {
//  read() { true }
//  write() { isSameId(uid) }
//}


// ================== Objects
type DisplayName extends String {
  validate() { this.length > 2 && this.length <= 32 }
}
type ProviderData {
  uid: String,
  email: String,
  providerId: String
}
type UserData {
  displayName: DisplayName,
  accountType: String,
  uid: String,
  isAnonymous: Boolean,
  emailVerified: Boolean,
  email: String,
  providerData: ProviderData
}
type User extends UserData {
  photoURL: String,
  isAnonymous: Boolean,
  following: Object,
  followers: Object,
  rooms: Object,
  notifs: Object,
  payments: Object,
  futureEvents: Object,
  pastEvents: Object,
  accounts: Object,
  page: Object,
  bank: Object,
  tickets: Object,
  location: Location
}

type AccountTypeArtist extends String {
  validate() { 'artist' == this }
}
type Artist extends User {
  members: Object,
  managers: Object,
  claimed: Boolean,
  collaboration: Collaboration,
  openDates: Object,
  bookedDates: Object,
  accountType: AccountTypeArtist
}


type AccountTypeVenue extends String {
  validate() { 'venue' == this }
}
type Venue extends User {
  members: Object,
  managers: Object,
  claimed: Boolean,
  collaboration: Collaboration,
  openDates: Object,
  bookedDates: Object,
  accountType: AccountTypeVenue
}

type AccountTypeFan extends String {
  validate() { 'fan' == this }
}
type Fan extends User {
  accountType: AccountTypeFan
}

type FundStatus {
  fundsRaised: Number,
  precentage: Number
}
type EventPage {
  cover: String,
  photoURL: String
}
type Event {
  uid: String,
  artists: Object,
  venues: Object,
  fans: Object,
  currency: Object,
  location: Location,
  date: Object,
  managers: Object,
  title: String,
  description: String,
  ticketPrice: Number,
  goalPrice: Number,
  fundStatus: FundStatus,
  verified: Boolean,
  collaboration: Collaboration,
  page: EventPage,
  payments: Object,
  venueVerified: Boolean,
  artistVerified: Boolean,
  cancelled: Boolean,
  funded: Boolean
}

type Payment {
  buyer: Object,
  buyerEmail: Object,
  seller: Object,
  token: Object,
  status: Object,
  price: Number,
  event: Object,
  uid: String,
  date: Object,
  currency: Object,
  paymentMethod: Object,
  cancelled: Boolean,
  processed: Boolean
}


type Ticket {
  buyer: Object,
  buyerEmail: Object,
  status: Object,
  price: Number,
  date: Object,
  event: Object,
  uid: String,
  payment: Object,
}

// ================= messages from git WIP ======================================

type Member {
  uid: String,
  photo: String,
  displayName: String,
  isBanned: Boolean,
}

type Room {
  create() { isEmptyAndLogged() }
  delete() { isSameId(prior(this).creator) }
  creator: String,
  uid: String,
  messages: Object,
  timeCreated: Object,
  last: Object,
  notifs: Object
}

type Message {
  uid: String,
  from: String,
  userUid: String,
  text: String,
  timeCreated: InitialTimestamp,
  seenBy: Object,
  room: Object
}




  // Make sure that the only value allowed to be written is now.
  //validate() { this.modified == now }

//======================================PATHS

path /users/{uid} is UserData {
  read() { isSameId(uid) || isAdmin() }
  write() { isAdmin() }
}

path /artists/{uid} is Artist {
  read() { true }
  write() { isSameId(uid) || isAdmin() }
}

path /venues/{uid} is Venue {
  read() { true }
  write() { isSameId(uid) || isAdmin() }
}

path /fans/{uid} is Fan {
  read() { true }
  write() { isSameId(uid) || isAdmin() }
}

path /events/{uid} is Event {
  read() { true }
  // write() { isEventOwner(uid) || isAdmin() }
  write() { isAdmin() }
}

path /payments/{uid} is Payment {
  read() { isAdmin() }
  write() { isAdmin() }
}

path /tickets/{uid} is Ticket {
  read() { isAdmin() }
  write() { isAdmin() }
}

path /rooms/{uid} is Room {
  read() { isMember(uid) }
  update() { isMember(uid) }
  create() { isEmptyAndLogged() }
}
path /rooms/{id}/uid is String {
  validate() { id == this }
}

path /rooms/{roomUid}/messages/{id} is Message {
  index() { ["timeCreated"] }
}
path /rooms/{roomUid}/messages/{id}/uid is String {
  validate() { id == this }
}

path /rooms/{roomUid}/members/{id} is Member {}
path /rooms/{roomUid}/members/{id}/uid is String {
  validate() { id == this }
}