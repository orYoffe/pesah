
// ================== Functions

isLoggedIn() { auth != null && currentUser() != null }
currentUser() { auth.uid }
isSameId(uid) { auth != null && uid == currentUser() }
isEmptyAndLogged() { auth != null && isInitial(data) }
// isAdmin () {
//   prior(root).child('users').child(currentUser()).child('isAdmin').val() == true;
// }

// isMember(id, this) {
//   isLoggedIn() && prior(this).child('members').val()[currentUser()] != null && !prior(this).child('members').val()[currentUser()].isBanned
// }
isEventPublished(eventId) {
  (prior(root).events[eventId].hasChildren(['isPublished']) && prior(root).events[eventId].isPublished == true) || (isLoggedIn() && prior(root).events[eventId].managers.hasChildren([auth.uid]))
}
isMember(roomId) {
  prior(root).members[roomId].hasChildren([auth.uid]) //&& prior(root).child('rooms').child(room).child('members').val()[auth.uid].isBanned != true
}
isNotBanned(roomId) {
  !prior(root).members[roomId][auth.uid].hasChildren(['isBanned']) || prior(root).members[roomId][auth.uid].isBanned != true
}
// isEventOwner(uid) {
//   isLoggedIn() && prior(root).child('events').child(uid).val() != null && prior(root).child('events').child(uid).child('managers').val()[currentUser()] == true;
// }

initial(value, init) { value == (isInitial(value) ? init : prior(value)) }
isInitial(value) { prior(value) == null }
// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.


type Location {
  country: String,
  city: String,
  short: String,
  address: String,
  lat: Number,
  lng: Number
}
type Collaboration {
  artists: Object,
  venues: Object,
  fans: Object
}
type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}
type ISODate extends String {
  validate() { this.test(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/) }
}

// ================== Objects
type DisplayName extends String {
  validate() { this.length > 4 && this.length <= 32 }
}
type UserData {
  displayName: DisplayName,
  accountType: String,
  uid: String,
  isAnonymous: Boolean,
  emailVerified: Boolean,
  email: String,
  providerData: Object
}
type User extends UserData {
  photoURL: String,
  isAnonymous: Boolean,
  following: Object,
  followers: Object,
  rooms: Object,
  notifs: Object,
  payments: Object,
  futureEvents: Object,
  pastEvents: Object,
  accounts: Object,
  page: Object,
  bank: Object,
  tickets: Object,
  location: Location
}

type AccountTypeArtist extends String {
  validate() { 'artist' == this }
}
type Artist extends User {
  members: Object,
  managers: Object,
  claimed: Boolean,
  collaboration: Collaboration,
  openDates: Object,
  bookedDates: Object,
  accountType: AccountTypeArtist,
  youtubeID: String
}


type AccountTypeVenue extends String {
  validate() { 'venue' == this }
}
type Venue extends User {
  members: Object,
  managers: Object,
  claimed: Boolean,
  collaboration: Collaboration,
  openDates: Object,
  bookedDates: Object,
  accountType: AccountTypeVenue
}

type AccountTypeFan extends String {
  validate() { 'fan' == this }
}
type Fan extends User {
  accountType: AccountTypeFan
}

type FundStatus {
  fundsRaised: Number,
  precentage: Number
}
type EventPage {
  cover: String,
  photoURL: String
}
type Event {
  uid: String,
  artists: Object,
  venues: Object,
  fans: Object,
  currency: Object,
  location: Location,
  date: Object,
  managers: Object,
  title: String,
  description: String,
  ticketPrice: Number,
  goalPrice: Number,
  fundStatus: FundStatus,
  verified: Boolean,
  collaboration: Collaboration,
  page: EventPage,
  payments: Object,
  venueVerified: Boolean,
  artistVerified: Boolean,
  cancelled: Boolean,
  funded: Boolean
}

type Payment {
  buyer: Object,
  buyerEmail: Object,
  seller: Object,
  token: Object,
  status: Object,
  price: Number,
  event: Object,
  uid: String,
  date: Object,
  currency: Object,
  paymentMethod: Object,
  cancelled: Boolean,
  processed: Boolean
}

type Ticket {
  buyer: Object,
  buyerEmail: Object,
  status: Object,
  price: Number,
  date: Object,
  event: Object,
  uid: String,
  payment: Object,
}


type Member {
}

type Room {
  // delete() { isSameId(prior(this).creator) }
  // index() { ["timeCreated"] }
  creator: String,
  uid: String,
  timeCreated: ISODate,
  last: Object,
  notifs: Object
}

type Message {
  // read() { isMember(this) && isNotBanned(this) }
  // from: String,
  // userUid: String,
  // uid: String,
  // text: String,
  // // timeCreated: ISODate,
  // timeCreated: String,
  // seenBy: Object,
  // room: String
}

  // Make sure that the only value allowed to be written is now.
  //validate() { this.modified == now }

type AnalyticsObject {
  /*time: String,
  event: String,
  url: String,
  eventData: Object | Null
  user: String | Null*/
}

//======================================PATHS

path /users/{uid} is UserData {
  read() { isSameId(uid) }
  create() { isSameId(uid) }
  update() { isSameId(uid) }
  // delete() { isAdmin() }
}

path /artists {
  read() { true }
}
path /artists/{uid} is Artist {
  write() { isSameId(uid) }
}
path /musician {
  read() { true }
}
path /musician/{uid} is Artist {
  write() { isSameId(uid) }
}

path /venues {
  read() { true }
}
path /venues/{uid} is Venue {
  write() { isSameId(uid) }
}
path /venueManagers/{uid} {
  read() { isSameId(uid) }
}

path /pendingVenues/{uid} is Venue {
  read() { isSameId(uid) }
  write() { isSameId(uid) }
}

/*path /fans {
  read() { true }
}
path /fans/{uid} is Fan {
  write() { isSameId(uid) }
}*/

path /events {
  read() { true }
  // update() { isEventOwner(uid) }
  // create() { isAdmin() }
}
/*path /events/{uid} is Event {
  read() { isEventPublished(uid) }
  // update() { isEventOwner(uid) }
  // create() { isAdmin() }
}*/
path /pendingEvents/{uid} is Event {
  read() { isSameId(uid) }
  // update() { isEventOwner(uid) }
  // create() { isAdmin() }
}

path /campains {
  read() { true }
  // update() { isEventOwner(uid) }
  // create() { isAdmin() }
}
path /pendingCampains/{uid} {
  read() { isSameId(uid) }
  // update() { isEventOwner(uid) }
  // create() { isAdmin() }
}

path /payments/{uid} is Payment {
  // read() { isAdmin() }
  // write() { isAdmin() }
}

path /tickets/{uid} is Ticket {
  // read() { isAdmin() }
  // write() { isAdmin() }
}

path /rooms/{uid} is Room {
  read() { isMember(uid) && isNotBanned(uid) }
  // update() { isMember(uid, this) }
  // create() { isEmptyAndLogged() }
  // create() { isLoggedIn() }
}

path /messages/{uid} is Message {
  index() { ["timeCreated"] }
  read() { isMember(uid) && isNotBanned(uid) }
  // write() { isMember(uid) && isNotBanned(uid) }
  write() { true } // WARNING DELETE THIS =======================================
}
path /members/{uid} is Member {
  read() { isMember(uid) && isNotBanned(uid) }
  update() { isMember(uid) && isNotBanned(uid) }
}
path /analytics/{uid}/{eventId} is AnalyticsObject {
  read() { isLoggedIn() && (eventId == currentUser() || uid == currentUser() || ('artist' + uid) == currentUser() || ('fan' + uid) == currentUser() || ('venue' + uid) == currentUser()) }
  write() { true }
}
